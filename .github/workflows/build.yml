name: Build Podman from Upstream

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *' # ogni giorno alle 3:00 UTC

permissions:
  contents: write

jobs:
  sync-and-build:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        arch: [amd64]

    steps:
      - name: Install base dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl git jq ca-certificates

      - name: Fetch latest Podman release tag from upstream
        id: get_tag_podman
        run: |
          tag=$(curl -s https://api.github.com/repos/containers/podman/releases/latest | jq -r .tag_name)
          version=$(echo "$tag" | sed 's/^v//')
          echo "Ultima release: $tag"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Clone Podman upstream source at tag
        run: |
          git clone --depth 1 --branch ${{ steps.get_tag_podman.outputs.tag }} https://github.com/containers/podman.git podman-source

      - name: Fetch latest Conmon release tag from upstream
        id: get_tag_conmon
        run: |
          tag=$(curl -s https://api.github.com/repos/containers/conmon/releases/latest | jq -r .tag_name)
          version=$(echo "$tag" | sed 's/^v//')
          echo "Ultima release: $tag"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Clone Conmon upstream source at tag
        run: |
          git clone --depth 1 --branch ${{ steps.get_tag_conmon.outputs.tag }} https://github.com/containers/conmon.git conmon-source

      - name: Fetch latest Crun release tag from upstream
        id: get_tag_crun
        run: |
          tag=$(curl -s https://api.github.com/repos/containers/crun/releases/latest | jq -r .tag_name)
          version=$(echo "$tag" | sed 's/^v//')
          echo "Ultima release: $tag"
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Clone Crun upstream source at tag
        run: |
          git clone --depth 1 --branch ${{ steps.get_tag_crun.outputs.tag }} https://github.com/containers/crun.git crun-source

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            btrfs-progs \
            gcc \
            git \
            build-essential \
            libtool \
            libprotobuf-c-dev \
            libcap-dev \
            libseccomp-dev \
            libyajl-dev \
            iptables \
            libassuan-dev \
            libbtrfs-dev \
            libc6-dev \
            libdevmapper-dev \
            libglib2.0-dev \
            libgpgme-dev \
            libgpg-error-dev \
            libprotobuf-dev \
            libprotobuf-c-dev \
            libseccomp-dev \
            libselinux1-dev \
            libsystemd-dev \
            go-md2man \
            autoconf \
            python3 \
            automake \
            make \
            containernetworking-plugins \
            pkg-config \
            runc \
            uidmap

      - name: Setup Go (latest version)
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.3'

      - name: Config Build
        id: get_config_build
        run: |
          PKGNAME="podman"
          ARCH="amd64"
          MAINTAINER="${GITHUB_ACTOR:-GitHub Actions} <mauro.cardillo@gmail.com>"
          STAGING_DIR="$(pwd)/pkgroot"
          DEBIAN_DIR="$STAGING_DIR/DEBIAN"
          echo "PKGNAME=$PKGNAME" >> $GITHUB_OUTPUT
          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "MAINTAINER=$MAINTAINER" >> $GITHUB_OUTPUT
          echo "STAGING_DIR=$STAGING_DIR" >> $GITHUB_OUTPUT
          echo "DEBIAN_DIR=$DEBIAN_DIR" >> $GITHUB_OUTPUT
          
      - name: Build Podman
        working-directory: ./podman-source
        run: |
          mkdir -p "${{ steps.get_config_build.outputs.DEBIAN_DIR }}"
          echo ">> [BUILD] Clean..."
          make clean
          echo ">> [BUILD] Build Podman ${{ steps.get_tag_podman.outputs.version }} ..."
          make BUILDTAGS="seccomp apparmor systemd" podman podman-remote rootlessport quadlet docs completions
          echo ">> [BUILD] Install to Staging dir..."
          make install DESTDIR="${{ steps.get_config_build.outputs.STAGING_DIR }}"
          echo ">> [BUILD] Aggiunta configurazioni di default..."
          mkdir -p "${{ steps.get_config_build.outputs.STAGING_DIR }}/etc/containers"
          mkdir -p "${{ steps.get_config_build.outputs.STAGING_DIR }}/usr/share/containers"
          wget https://raw.githubusercontent.com/containers/image/main/registries.conf -O "${{ steps.get_config_build.outputs.STAGING_DIR }}/etc/containers/registries.conf"
          wget https://raw.githubusercontent.com/containers/common/main/pkg/subscriptions/mounts.conf -O "${{ steps.get_config_build.outputs.STAGING_DIR }}/usr/share/containers/mounts.conf"
          wget https://raw.githubusercontent.com/containers/image/main/default-policy.json  -O "${{ steps.get_config_build.outputs.STAGING_DIR }}/etc/containers/policy.json"
          echo ">> [BUILD] Added unit systemd..."
          mkdir -p "${{ steps.get_config_build.outputs.STAGING_DIR }}/lib/systemd/system"
          cp contrib/systemd/system/podman.* "${{ steps.get_config_build.outputs.STAGING_DIR }}/lib/systemd/system/"

      - name: Build Conmon
        working-directory: ./conmon-source
        run: |
          make
          cp bin/* "${{ steps.get_config_build.outputs.STAGING_DIR }}/usr/local/bin/"

      - name: Build Crun
        working-directory: ./crun-source
        run: |
          ./autogen.sh
          ./configure
          make
          cp crun "${{ steps.get_config_build.outputs.STAGING_DIR }}/usr/local/bin/"

      - name: Package Metadata
        run: |
          echo ">> [BUILD] Generated metadata DEBIAN/"
          cat <<EOF > "${{ steps.get_config_build.outputs.STAGING_DIR }}/DEBIAN/control"
          Package: $PKGNAME
          Version: $VERSION
          Section: admin
          Priority: optional
          Architecture: $ARCH
          Maintainer: $MAINTAINER
          Depends: libc6 (>= 2.28), libseccomp2 (>= 2.4.0), uidmap (>= 1.4.8), libgpgme-dev (>= 1.24.2), passt (>= 0.0)
          Description: Daemonless OCI container runtime
           Podman is a daemonless container engine for developing, managing, and running OCI Containers and Pods.
          EOF
          
          # postinst
          cat <<'EOF' > "${{ steps.get_config_build.outputs.STAGING_DIR }}/DEBIAN/postinst"
          #!/bin/bash
          set -e
          echo "[postinst] Abilito e avvio podman.socket..."
          systemctl daemon-reexec
          systemctl enable podman.socket
          systemctl start podman.socket
          EOF

          # postrm
          cat <<'EOF' > "${{ steps.get_config_build.outputs.STAGING_DIR }}/DEBIAN/postrm"
          #!/bin/bash
          set -e
          echo "[postrm] Disabilito podman.socket..."
          systemctl disable podman.socket || true
          systemctl stop podman.socket || true
          EOF

          # preinst
          cat <<'EOF' > "${{ steps.get_config_build.outputs.STAGING_DIR }}/DEBIAN/preinst"
          #!/bin/bash
          set -e
          echo "[preinst] Stop podman.socket se attivo..."
          if systemctl is-active --quiet podman.socket; then
            systemctl stop podman.socket
          fi
          EOF

          # prerm
          cat <<'EOF' > "${{ steps.get_config_build.outputs.STAGING_DIR }}/DEBIAN/prerm"
          #!/bin/bash
          set -e
          echo "[prerm] Stop podman.socket..."
          systemctl stop podman.socket || true
          EOF
          
          # Permission script
          chmod 0755 "${{ steps.get_config_build.outputs.STAGING_DIR }}/DEBIAN/"*
          
          echo ">> [BUILD] Imposto permessi corretti..."
          find "${{ steps.get_config_build.outputs.STAGING_DIR }}/usr" -type f -exec chmod 0755 {} \;
          find "${{ steps.get_config_build.outputs.STAGING_DIR }}/etc" -type f -exec chmod 0644 {} \;
          find "${{ steps.get_config_build.outputs.STAGING_DIR }}/lib/systemd" -type f -exec chmod 0644 {} \;

      - name: Build Package
        run: |
          DEBNAME="${{ steps.get_config_build.outputs.PKGNAME }}_${{ steps.get_config_build.outputs.VERSION }}_${{ steps.get_config_build.outputs.ARCH }}.deb"
          echo ">> [BUILD] Creation package $DEBNAME..."
          dpkg-deb --build "${{ steps.get_config_build.outputs.STAGING_DIR }}" "$DEBNAME"
          ls -la *.deb
